create or replace
PROCEDURE P_AWR_REPORT (
	P_BEGIN IN VARCHAR2,
	P_END IN VARCHAR2,
	P_DIR IN VARCHAR2,
	P_DBID IN NUMBER DEFAULT NULL,
	P_PERINTERVAL IN BOOLEAN DEFAULT FALSE,
	P_GLOBAL IN BOOLEAN DEFAULT FALSE) AS
	TYPE T_VARCHAR IS TABLE OF VARCHAR2(8000 CHAR) INDEX BY BINARY_INTEGER;
	V_REPORT T_VARCHAR;
	V_FILE UTL_FILE.FILE_TYPE;
	TYPE T_NUM IS TABLE OF NUMBER INDEX BY BINARY_INTEGER;
	TYPE T_DATE IS TABLE OF DATE INDEX BY BINARY_INTEGER;
	V_INSTANCE T_NUM;
	V_SNAP_BEG T_NUM;
	V_SNAP_END T_NUM;
	V_BEGIN_DATE T_DATE;
	V_END_DATE T_DATE;
	V_BEGIN NUMBER;
	V_END NUMBER;
	V_DBID NUMBER;
	V_DBNAME V$DATABASE.NAME%TYPE;
	V_VERSION V$VERSION.BANNER%TYPE;
BEGIN

	IF P_DBID IS NOT NULL THEN
		SELECT DISTINCT DBID, DB_NAME
		INTO V_DBID, V_DBNAME
		FROM DBA_HIST_DATABASE_INSTANCE
		WHERE DBID = P_DBID;
	ELSE
		SELECT DBID, NAME
		INTO V_DBID, V_DBNAME
		FROM V$DATABASE;
	END IF;

	SELECT DISTINCT INSTANCE_NUMBER,
		FIRST_VALUE(SNAP_ID) OVER(PARTITION BY INSTANCE_NUMBER ORDER BY ABS(CAST (END_INTERVAL_TIME AS DATE) - TO_DATE(P_BEGIN, 'YYYYMMDDHH24MISS'))),
		FIRST_VALUE(END_INTERVAL_TIME) OVER(PARTITION BY INSTANCE_NUMBER ORDER BY ABS(CAST (END_INTERVAL_TIME AS DATE) - TO_DATE(P_BEGIN, 'YYYYMMDDHH24MISS')))
	BULK COLLECT INTO V_INSTANCE, V_SNAP_BEG, V_BEGIN_DATE
	FROM DBA_HIST_SNAPSHOT
	WHERE DBID = V_DBID
	ORDER BY INSTANCE_NUMBER;

	FOR I IN V_INSTANCE.FIRST..V_INSTANCE.LAST LOOP
		BEGIN
			SELECT DISTINCT FIRST_VALUE(SNAP_ID) OVER(ORDER BY ABS(CAST (END_INTERVAL_TIME AS DATE) - TO_DATE(P_END, 'YYYYMMDDHH24MISS'))),
			FIRST_VALUE(END_INTERVAL_TIME) OVER(ORDER BY ABS(CAST (END_INTERVAL_TIME AS DATE) - TO_DATE(P_END, 'YYYYMMDDHH24MISS')))
			INTO V_SNAP_END(I), V_END_DATE(I)
			FROM DBA_HIST_SNAPSHOT
			WHERE SNAP_ID > V_SNAP_BEG(I)
			AND DBID = V_DBID
			AND INSTANCE_NUMBER = V_INSTANCE(I);
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
				V_INSTANCE.DELETE(I);
		END;
	END LOOP;

	IF V_INSTANCE.COUNT = 1
	THEN
 		V_BEGIN := V_SNAP_BEG(1);
		IF P_PERINTERVAL = FALSE
 		THEN
 			V_END := V_SNAP_END(1);
 		ELSE
 			V_END := V_SNAP_BEG(1) + 1;
 			SELECT END_INTERVAL_TIME
			INTO V_END_DATE(1)
 			FROM DBA_HIST_SNAPSHOT
 			WHERE DBID = V_DBID
			AND INSTANCE_NUMBER = 1
			AND SNAP_ID = V_END;
 		END IF;
		WHILE(V_END <= V_SNAP_END(1)) LOOP
			V_FILE := UTL_FILE.FOPEN(
				P_DIR,
				'awr_' || V_DBNAME || '_' || V_INSTANCE(1) || '_'
					|| TO_CHAR(V_BEGIN_DATE(1), 'YYYYMMDD_HH24MISS') || '_'
					|| TO_CHAR(V_END_DATE(1), 'YYYYMMDD_HH24MISS') || '.html',
				'w',
				32767);

			SELECT OUTPUT
			BULK COLLECT INTO V_REPORT
			FROM TABLE(
				DBMS_WORKLOAD_REPOSITORY.AWR_REPORT_HTML(
					V_DBID,
					V_INSTANCE(1),
					V_BEGIN,
					V_END,
					0));
			FOR I IN 1..V_REPORT.COUNT LOOP
				UTL_FILE.PUT_LINE(V_FILE, V_REPORT(I));
			END LOOP;
			UTL_FILE.FCLOSE(V_FILE);
			V_BEGIN := V_BEGIN + 1;
			V_END := V_END + 1;
			V_BEGIN_DATE(1) := V_END_DATE(1);
			SELECT MAX(END_INTERVAL_TIME)
			INTO V_END_DATE(1)
 			FROM DBA_HIST_SNAPSHOT
 			WHERE DBID = V_DBID
			AND INSTANCE_NUMBER = 1
			AND SNAP_ID = V_END;
		END LOOP;
	ELSE
		SELECT BANNER
		INTO V_VERSION
		FROM V$VERSION
		WHERE BANNER LIKE 'CORE%';
		IF (TO_NUMBER(LTRIM(SUBSTR(V_VERSION, 5, INSTR(V_VERSION, '.', 1) - 5), CHR(9))) > 11
			OR (TO_NUMBER(LTRIM(SUBSTR(V_VERSION, 5, INSTR(V_VERSION, '.', 1) - 5), CHR(9))) = 11
				AND TO_NUMBER(SUBSTR(V_VERSION, INSTR(V_VERSION, '.', 1) + 1, INSTR(V_VERSION, '.', 1, 2) - INSTR(V_VERSION, '.', 1))) = 2))
			AND P_GLOBAL
		THEN
	 		V_BEGIN := V_SNAP_BEG(1);
			IF P_PERINTERVAL = FALSE
	 		THEN
	 			V_END := V_SNAP_END(1);
	 		ELSE
	 			V_END := V_SNAP_BEG(1) + 1;
	 			SELECT END_INTERVAL_TIME
				INTO V_END_DATE(1)
	 			FROM DBA_HIST_SNAPSHOT
	 			WHERE DBID = V_DBID
				AND INSTANCE_NUMBER = 1
				AND SNAP_ID = V_END;
	 		END IF;
			WHILE(V_END <= V_SNAP_END(1)) LOOP
				V_FILE := UTL_FILE.FOPEN(
					P_DIR,
					'awr_' || V_DBNAME || '_' || 'RAC' || '_'
						|| TO_CHAR(V_BEGIN_DATE(1), 'YYYYMMDD_HH24MISS') || '_'
						|| TO_CHAR(V_END_DATE(1), 'YYYYMMDD_HH24MISS') || '.html',
					'w',
					32767);

				EXECUTE IMMEDIATE
					'SELECT OUTPUT FROM TABLE(DBMS_WORKLOAD_REPOSITORY.AWR_GLOBAL_REPORT_HTML(:DBID, '''', :BEGIN, :END, 0))'
					BULK COLLECT INTO V_REPORT
					USING V_DBID, V_BEGIN, V_END;

				FOR I IN 1..V_REPORT.COUNT LOOP
					UTL_FILE.PUT_LINE(V_FILE, V_REPORT(I));
				END LOOP;
				UTL_FILE.FCLOSE(V_FILE);
				V_BEGIN := V_BEGIN + 1;
				V_END := V_END + 1;
				V_BEGIN_DATE(1) := V_END_DATE(1);
				SELECT MAX(END_INTERVAL_TIME)
				INTO V_END_DATE(1)
	 			FROM DBA_HIST_SNAPSHOT
	 			WHERE DBID = V_DBID
				AND INSTANCE_NUMBER = 1
				AND SNAP_ID = V_END;
			END LOOP;
		ELSE
			FOR I IN V_INSTANCE.FIRST..V_INSTANCE.LAST LOOP
		 		V_BEGIN := V_SNAP_BEG(I);
				IF P_PERINTERVAL = FALSE
		 		THEN
		 			V_END := V_SNAP_END(I);
		 		ELSE
		 			V_END := V_SNAP_BEG(I) + 1;
		 			SELECT END_INTERVAL_TIME
					INTO V_END_DATE(I)
		 			FROM DBA_HIST_SNAPSHOT
		 			WHERE DBID = V_DBID
					AND INSTANCE_NUMBER = V_INSTANCE(I)
					AND SNAP_ID = V_END;
		 		END IF;
				WHILE(V_END <= V_SNAP_END(I)) LOOP
					V_FILE := UTL_FILE.FOPEN(
						P_DIR,
						'awr_' || V_DBNAME || '_' || V_INSTANCE(I) || '_'
							|| TO_CHAR(V_BEGIN_DATE(I), 'YYYYMMDD_HH24MISS') || '_'
							|| TO_CHAR(V_END_DATE(I), 'YYYYMMDD_HH24MISS') || '.html',
						'w',
						32767);

					SELECT OUTPUT
					BULK COLLECT INTO V_REPORT
					FROM TABLE(
						DBMS_WORKLOAD_REPOSITORY.AWR_REPORT_HTML(
							V_DBID,
							V_INSTANCE(I),
							V_BEGIN,
							V_END,
							0));
					FOR I IN 1..V_REPORT.COUNT LOOP
						UTL_FILE.PUT_LINE(V_FILE, V_REPORT(I));
					END LOOP;
					UTL_FILE.FCLOSE(V_FILE);
					V_BEGIN := V_BEGIN + 1;
					V_END := V_END + 1;
					V_BEGIN_DATE(I) := V_END_DATE(I);
					SELECT MAX(END_INTERVAL_TIME)
					INTO V_END_DATE(I)
		 			FROM DBA_HIST_SNAPSHOT
		 			WHERE DBID = V_DBID
					AND INSTANCE_NUMBER = V_INSTANCE(I)
					AND SNAP_ID = V_END;
				END LOOP;
			END LOOP;
		END IF;
	END IF;
END;